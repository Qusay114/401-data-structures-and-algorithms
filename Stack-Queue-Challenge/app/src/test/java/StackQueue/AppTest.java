/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package StackQueue;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void testPushStack(){
        StackLinkedList testStackList = new StackLinkedList();
        testStackList.push(1);
        assertNotNull(testStackList);
    }
    @Test
    public void testMultiPushStack(){
        StackLinkedList testStackList = new StackLinkedList();
        testStackList.push(1);
        testStackList.push(2);
        testStackList.push(3);
        assertEquals("{3} -> {2} -> {1} -> NULL" , testStackList.toString());
    }
    @Test
    public void testPopStack(){
        StackLinkedList testStackList = new StackLinkedList();
        testStackList.push(1);
        testStackList.push(2);
        testStackList.push(3);
        testStackList.pop() ;
        assertEquals("{2} -> {1} -> NULL" , testStackList.toString());
    }
    @Test
    public void testMultiPopStack(){
        StackLinkedList testStackList = new StackLinkedList();
        testStackList.push(1);
        testStackList.push(2);
        testStackList.push(3);
        testStackList.pop();
        testStackList.pop();
        testStackList.pop();
        assertEquals("The stack is empty" , testStackList.toString());
    }
    @Test
    public void testPeekStack(){
        StackLinkedList testStackList = new StackLinkedList();
        testStackList.push(1);
        testStackList.push(2);
        testStackList.push(3);
        assertEquals(3 , testStackList.peek());
    }
    @Test
    public void testInstantiateStack (){
        StackLinkedList testStackList = new StackLinkedList();
        assertEquals("The stack is empty" , testStackList.toString());
    }
    @Test
    public void testPopPeekEmptyStack(){
        StackLinkedList testStackList = new StackLinkedList();
        assertEquals("Exception" , testStackList.pop());
        assertEquals("Exception" , testStackList.peek());
    }
    @Test
    public void testEnqueueQueue(){
        QueueLinkedList testQueueList = new QueueLinkedList();
        testQueueList.enqueue(1);
        assertNotNull(testQueueList);
    }
    @Test
    public void testMultiEnqueueQueue(){
        QueueLinkedList testQueueList = new QueueLinkedList();
        testQueueList.enqueue(1);
        testQueueList.enqueue(2);
        testQueueList.enqueue(3);
        assertEquals("{ 1 } -> { 2 } -> { 3 } -> NULL" , testQueueList.toString());
    }
    @Test
    public void testDequeueQueue(){
        QueueLinkedList testQueueList = new QueueLinkedList();
        testQueueList.enqueue(1);
        testQueueList.enqueue(2);
        assertEquals("{ 1 } -> { 2 } -> NULL" , testQueueList.toString());
    }
    @Test
    public void testPeekQueue(){
        QueueLinkedList testQueueList = new QueueLinkedList();
        testQueueList.enqueue(1);
        testQueueList.enqueue(2);
        testQueueList.enqueue(3);
        assertEquals(1 , testQueueList.peek());
    }
    @Test
    public void testMultiDequeueQueue(){
        QueueLinkedList testQueueList = new QueueLinkedList();
        testQueueList.enqueue(1);
        testQueueList.enqueue(2);
        testQueueList.enqueue(3);
        testQueueList.dequeue();
        testQueueList.dequeue();
        testQueueList.dequeue();
        assertEquals("The Queue list is empty" , testQueueList.toString());
    }
    @Test
    public void testInstantiateQueue(){
        QueueLinkedList testQueueList = new QueueLinkedList();
        assertEquals("The Queue list is empty" , testQueueList.toString());
    }
    @Test
    public void testDequeuePeekEmptyQueue(){
        QueueLinkedList testQueueList = new QueueLinkedList() ;
        assertEquals("Exception" , testQueueList.dequeue());
        assertEquals("Exception" , testQueueList.peek());
    }
    @DisplayName("Test Instantiate Pseudo Queue")
    @Test
    public void testInstantiatePseudoQueue(){
        PseudoQueue pseudoQueueTest = new PseudoQueue() ;
        assertEquals("empty" , pseudoQueueTest.toString() );
    }
    @DisplayName("Test Enqueue Pseudo Queue")
    @Test
    public void testEnqueuePseudoQueue(){
        PseudoQueue pseudoQueueTest = new PseudoQueue() ;
        pseudoQueueTest.enqueue(20);
        pseudoQueueTest.enqueue(15);
        pseudoQueueTest.enqueue(10);
        pseudoQueueTest.enqueue(5);
        assertEquals("{5} -> {10} -> {15} -> {20} -> NULL" , pseudoQueueTest.toString());
    }
    @DisplayName("Test Dequeue Pseudo Queue")
    @Test
    public void testDequeuePseudoQueue(){
        PseudoQueue pseudoQueueTest = new PseudoQueue() ;
        pseudoQueueTest.enqueue(20);
        pseudoQueueTest.enqueue(15);
        pseudoQueueTest.enqueue(10);
        pseudoQueueTest.enqueue(5);
        pseudoQueueTest.dequeue();
        assertEquals("{5} -> {10} -> {15} -> NULL" , pseudoQueueTest.toString());
    }
    @DisplayName("Test enqueue in AnimalShelter")
    @Test
    public void testEnqueueAnimalShelter() {
        AnimalShelter animalShelterTest = new AnimalShelter();
        Animal cat = new Animal("cat");
        Animal dog = new Animal("dog");
        Animal cat1 = new Animal("cat");
        Animal dog1 = new Animal("dog");
        animalShelterTest.enqueue(cat);
        animalShelterTest.enqueue(dog);
        animalShelterTest.enqueue(cat1);
        animalShelterTest.enqueue(dog1);
        assertEquals("{ cat } -> { dog } -> { cat } -> { dog } -> NULL" , animalShelterTest.toString() ,
        "it should return the animals that equeued!");
    }
    @DisplayName("Test dequeue in AnimalShelter")
    @Test
    public void testDequeueAnimalShelter(){
        AnimalShelter animalShelterTest = new AnimalShelter();
        Animal cat = new Animal("cat");
        Animal dog = new Animal("dog");
        Animal cat1 = new Animal("cat");
        Animal dog1 = new Animal("dog");
        animalShelterTest.enqueue(cat);
        animalShelterTest.enqueue(dog);
        animalShelterTest.enqueue(cat1);
        animalShelterTest.enqueue(dog1);
        assertEquals("dog" , animalShelterTest.dequeue("dog") , "it should return dog!");
        assertEquals("{ cat } -> { cat } -> { dog } -> NULL" , animalShelterTest.toString() ,
                "it should return the animals that equeued except the one has been dequeued");

    }

}
