/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TreeDataStructure;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @DisplayName("Test instantiate an empty tree")
    @Test
    public void testInstantiateTree(){
        BinaryTree binaryTree = new BinaryTree() ;
        assertNotNull(binaryTree , "it should instantiate an empty tree");
    }

    @DisplayName("Test instantiate a tree with single root element")
    @Test
    public void testInstantiateTreeWithRoot(){
        BinaryTree binaryTree = new BinaryTree() ;
        binaryTree.setRoot(new Node("10"));
        assertEquals("10" , binaryTree.getRoot().getData() , "it should return the root value which is 10");
    }

    @DisplayName("Test add a left child and right child to a single root node")
    @Test
    public void testAddRLNodes(){
        BinaryTree binaryTree = new BinaryTree() ;
        binaryTree.setRoot(new Node("10"));
        binaryTree.getRoot().setLeft(new Node("20"));
        binaryTree.getRoot().setRight(new Node("30"));
        assertEquals("10" , binaryTree.getRoot().getData() ,            "it should return the root value which is 10");
        assertEquals("20" , binaryTree.getRoot().getLeft().getData(),   "it should return the left value which is 20");
        assertEquals("30" , binaryTree.getRoot().getRight().getData() , "it should return the right value which is 30");

    }

    @DisplayName("Test inOrderTraverse method in the tree")
    @Test
    public void testInOrderTraverse(){
        BinaryTree binaryTree = new BinaryTree() ;
        binaryTree.setRoot(new Node("10"));
        binaryTree.getRoot().setLeft(new Node("20"));
        binaryTree.getRoot().setRight(new Node("30"));
        assertEquals("[20, 10, 30]", binaryTree.inOrderTraversals(binaryTree.getRoot()));
    }

    @DisplayName("Test preOrderTraverse method in the tree")
    @Test
    public void testPreOrderTraverse(){
        BinaryTree binaryTree = new BinaryTree() ;
        binaryTree.setRoot(new Node("10"));
        binaryTree.getRoot().setLeft(new Node("20"));
        binaryTree.getRoot().setRight(new Node("30"));
        assertEquals("[10, 20, 30]", binaryTree.preOrderTraversals(binaryTree.getRoot()));
    }

    @DisplayName("Test postOrderTraverse method in the tree")
    @Test
    public void testPostOrderTraverse(){
        BinaryTree binaryTree = new BinaryTree() ;
        binaryTree.setRoot(new Node("10"));
        binaryTree.getRoot().setLeft(new Node("20"));
        binaryTree.getRoot().setRight(new Node("30"));
        assertEquals("[20, 30, 10]", binaryTree.postOrderTraversals(binaryTree.getRoot()));
    }

}
